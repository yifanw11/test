# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/tna_nbnswitch.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/tna_nbnswitch.p4"
# 1 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */




/// Standard error codes.  New error codes can be declared by users.
error {
    NoError, /// No error.
    PacketTooShort, /// Not enough bits in packet for 'extract'.
    NoMatch, /// 'select' expression has no matches.
    StackOutOfBounds, /// Reference to invalid element of a header stack.
    HeaderTooShort, /// Extracting too many bits into a varbit field.
    ParserTimeout, /// Parser execution time limit exceeded.
    ParserInvalidArgument /// Parser operation was called with a value
                           /// not supported by the implementation.
}

extern packet_in {
    /// Read a header from the packet into a fixed-sized header @hdr and advance the cursor.
    /// May trigger error PacketTooShort or StackOutOfBounds.
    /// @T must be a fixed-size header type
    void extract<T>(out T hdr);
    /// Read bits from the packet into a variable-sized header @variableSizeHeader
    /// and advance the cursor.
    /// @T must be a header containing exactly 1 varbit field.
    /// May trigger errors PacketTooShort, StackOutOfBounds, or HeaderTooShort.
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    /// Read bits from the packet without advancing the cursor.
    /// @returns: the bits read from the packet.
    /// T may be an arbitrary fixed-size type.
    T lookahead<T>();
    /// Advance the packet cursor by the specified number of bits.
    void advance(in bit<32> sizeInBits);
    /// @return packet length in bytes.  This method may be unavailable on
    /// some target architectures.
    bit<32> length();
}

extern packet_out {
    /// Write @hdr into the output packet, advancing cursor.
    /// @T can be a header type, a header stack, a header_union, or a struct
    /// containing fields with such types.
    void emit<T>(in T hdr);
}

// TODO: remove from this file, convert to built-in
/// Check a predicate @check in the parser; if the predicate is true do nothing,
/// otherwise set the parser error to @toSignal, and transition to the `reject` state.
extern void verify(in bool check, in error toSignal);

/// Built-in action that does nothing.
@noWarn("unused")
action NoAction() {}

/// Standard match kinds for table key fields.
/// Some architectures may not support all these match kinds.
/// Architectures can declare additional match kinds.
match_kind {
    /// Match bits exactly.
    exact,
    /// Ternary match, using a mask.
    ternary,
    /// Longest-prefix match.
    lpm
}
# 2 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/tna_nbnswitch.p4" 2
# 1 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tna.p4" 1
/**
 * Copyright 2013-2021 Intel Corporation.
 *
 * This software and the related documents are Intel copyrighted materials, and your use of them
 * is governed by the express license under which they were provided to you ("License"). Unless
 * the License provides otherwise, you may not use, modify, copy, publish, distribute, disclose
 * or transmit this software or the related documents without Intel's prior written permission.
 *
 * This software and the related documents are provided as is, with no express or implied
 * warranties, other than those that are expressly stated in the License.
 */


# 1 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tofino1arch.p4" 1
/**
 * Copyright 2013-2021 Intel Corporation.
 *
 * This software and the related documents are Intel copyrighted materials, and your use of them
 * is governed by the express license under which they were provided to you ("License"). Unless
 * the License provides otherwise, you may not use, modify, copy, publish, distribute, disclose
 * or transmit this software or the related documents without Intel's prior written permission.
 *
 * This software and the related documents are provided as is, with no express or implied
 * warranties, other than those that are expressly stated in the License.
 */




# 1 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 17 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tofino1arch.p4" 2
# 1 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tofino.p4" 1
/**
 * Copyright 2013-2021 Intel Corporation.
 *
 * This software and the related documents are Intel copyrighted materials, and your use of them
 * is governed by the express license under which they were provided to you ("License"). Unless
 * the License provides otherwise, you may not use, modify, copy, publish, distribute, disclose
 * or transmit this software or the related documents without Intel's prior written permission.
 *
 * This software and the related documents are provided as is, with no express or implied
 * warranties, other than those that are expressly stated in the License.
 */




/**
 Version Notes:

 1.0.1:
 - Initial release
 1.0.2:
 - Rename PARSER_ERROR_NO_TCAM to PARSER_ERROR_NO_MATCH

*/




# 1 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 30 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tofino.p4" 2

// ----------------------------------------------------------------------------
// COMMON TYPES
// ----------------------------------------------------------------------------
typedef bit<9> PortId_t; // Port id -- ingress or egress port
typedef bit<16> MulticastGroupId_t; // Multicast group id
typedef bit<5> QueueId_t; // Queue id
typedef bit<3> MirrorType_t; // Mirror type
typedef bit<10> MirrorId_t; // Mirror id
typedef bit<3> ResubmitType_t; // Resubmit type
typedef bit<3> DigestType_t; // Digest type
typedef bit<16> ReplicationId_t; // Replication id

typedef error ParserError_t;

const bit<32> PORT_METADATA_SIZE = 32w64;

const bit<16> PARSER_ERROR_OK = 16w0x0000;
const bit<16> PARSER_ERROR_NO_MATCH = 16w0x0001;
const bit<16> PARSER_ERROR_PARTIAL_HDR = 16w0x0002;
const bit<16> PARSER_ERROR_CTR_RANGE = 16w0x0004;
const bit<16> PARSER_ERROR_TIMEOUT_USER = 16w0x0008;
const bit<16> PARSER_ERROR_TIMEOUT_HW = 16w0x0010;
const bit<16> PARSER_ERROR_SRC_EXT = 16w0x0020;
const bit<16> PARSER_ERROR_DST_CONT = 16w0x0040;
const bit<16> PARSER_ERROR_PHV_OWNER = 16w0x0080;
const bit<16> PARSER_ERROR_MULTIWRITE = 16w0x0100;
const bit<16> PARSER_ERROR_ARAM_MBE = 16w0x0400;
const bit<16> PARSER_ERROR_FCS = 16w0x0800;

/// Meter
enum MeterType_t { PACKETS, BYTES }

enum bit<8> MeterColor_t { GREEN = 8w0, YELLOW = 8w1, RED = 8w3 }

/// Counter
enum CounterType_t {
    PACKETS,
    BYTES,
    PACKETS_AND_BYTES
}

/// Selector mode
enum SelectorMode_t { FAIR, RESILIENT }

enum HashAlgorithm_t {
    IDENTITY,
    RANDOM,
    CRC8,
    CRC16,
    CRC32,
    CRC64,
    CUSTOM
}

match_kind {
    // exact,
    // ternary,
    // lpm,               // Longest-prefix match.
    range,
    selector, // Used for implementing dynamic action selection
    atcam_partition_index // Used for implementing algorithmic tcam
}

error {
    // NoError,           // No error.
    // NoMatch,           // 'select' expression has no matches.
    // PacketTooShort,    // Not enough bits in packet for 'extract'.
    // StackOutOfBounds,  // Reference to invalid element of a header stack.
    // HeaderTooShort,    // Extracting too many bits into a varbit field.
    // ParserTimeout      // Parser execution time limit exceeded.
    CounterRange, // Counter initialization error.
    Timeout,
    PhvOwner, // Invalid destination container.
    MultiWrite,
    IbufOverflow, // Input buffer overflow.
    IbufUnderflow // Inbut buffer underflow.
}

// -----------------------------------------------------------------------------
// INGRESS INTRINSIC METADATA
// -----------------------------------------------------------------------------
@__intrinsic_metadata
header ingress_intrinsic_metadata_t {
    bit<1> resubmit_flag; // Flag distinguishing original packets
                                        // from resubmitted packets.
    @padding bit<1> _pad1;

    bit<2> packet_version; // Read-only Packet version.

    @padding bit<3> _pad2;

    PortId_t ingress_port; // Ingress physical port id.

    bit<48> ingress_mac_tstamp; // Ingress IEEE 1588 timestamp (in nsec)
                                        // taken at the ingress MAC.
}

@__intrinsic_metadata
struct ingress_intrinsic_metadata_for_tm_t {
    PortId_t ucast_egress_port; // Egress port for unicast packets. must
                                        // be presented to TM for unicast.

    bit<1> bypass_egress; // Request flag for the warp mode
                                        // (egress bypass).

    bit<1> deflect_on_drop; // Request for deflect on drop. must be
                                        // presented to TM to enable deflection
                                        // upon drop.

    bit<3> ingress_cos; // Ingress cos (iCoS) for PG mapping,
                                        // ingress admission control, PFC,
                                        // etc.

    QueueId_t qid; // Egress (logical) queue id into which
                                        // this packet will be deposited.

    bit<3> icos_for_copy_to_cpu; // Ingress cos for the copy to CPU. must
                                        // be presented to TM if copy_to_cpu ==
                                        // 1.

    bit<1> copy_to_cpu; // Request for copy to cpu.

    bit<2> packet_color; // Packet color (G,Y,R) that is
                                        // typically derived from meters and
                                        // used for color-based tail dropping.

    bit<1> disable_ucast_cutthru; // Disable cut-through forwarding for
                                        // unicast.

    bit<1> enable_mcast_cutthru; // Enable cut-through forwarding for
                                        // multicast.

    MulticastGroupId_t mcast_grp_a; // 1st multicast group (i.e., tree) id;
                                        // a tree can have two levels. must be
                                        // presented to TM for multicast.

    MulticastGroupId_t mcast_grp_b; // 2nd multicast group (i.e., tree) id;
                                        // a tree can have two levels.

    bit<13> level1_mcast_hash; // Source of entropy for multicast
                                        // replication-tree level1 (i.e., L3
                                        // replication). must be presented to TM
                                        // for L3 dynamic member selection
                                        // (e.g., ECMP) for multicast.

    bit<13> level2_mcast_hash; // Source of entropy for multicast
                                        // replication-tree level2 (i.e., L2
                                        // replication). must be presented to TM
                                        // for L2 dynamic member selection
                                        // (e.g., LAG) for nested multicast.

    bit<16> level1_exclusion_id; // Exclusion id for multicast
                                        // replication-tree level1. used for
                                        // pruning.

    bit<9> level2_exclusion_id; // Exclusion id for multicast
                                        // replication-tree level2. used for
                                        // pruning.

    bit<16> rid; // L3 replication id for multicast.
}

@__intrinsic_metadata
struct ingress_intrinsic_metadata_from_parser_t {
    bit<48> global_tstamp; // Global timestamp (ns) taken upon
                                        // arrival at ingress.

    bit<32> global_ver; // Global version number taken upon
                                        // arrival at ingress.

    bit<16> parser_err; // Error flags indicating error(s)
                                        // encountered at ingress parser.
}

@__intrinsic_metadata
struct ingress_intrinsic_metadata_for_deparser_t {

    bit<3> drop_ctl; // Disable packet replication:
                                        //    - bit 0 disables unicast,
                                        //      multicast, and resubmit
                                        //    - bit 1 disables copy-to-cpu
                                        //    - bit 2 disables mirroring
    DigestType_t digest_type;

    ResubmitType_t resubmit_type;

    MirrorType_t mirror_type; // The user-selected mirror field list
                                        // index.
}

// -----------------------------------------------------------------------------
// EGRESS INTRINSIC METADATA
// -----------------------------------------------------------------------------
@__intrinsic_metadata
header egress_intrinsic_metadata_t {
    @padding bit<7> _pad0;

    PortId_t egress_port; // Egress port id.
                                        // this field is passed to the deparser

    @padding bit<5> _pad1;

    bit<19> enq_qdepth; // Queue depth at the packet enqueue
                                        // time.

    @padding bit<6> _pad2;

    bit<2> enq_congest_stat; // Queue congestion status at the packet
                                        // enqueue time.

    @padding bit<14> _pad3;
    bit<18> enq_tstamp; // Time snapshot taken when the packet
                                        // is enqueued (in nsec).

    @padding bit<5> _pad4;

    bit<19> deq_qdepth; // Queue depth at the packet dequeue
                                        // time.

    @padding bit<6> _pad5;

    bit<2> deq_congest_stat; // Queue congestion status at the packet
                                        // dequeue time.

    bit<8> app_pool_congest_stat; // Dequeue-time application-pool
                                        // congestion status. 2bits per
                                        // pool.

    @padding bit<14> _pad6;
    bit<18> deq_timedelta; // Time delta between the packet's
                                        // enqueue and dequeue time.

    bit<16> egress_rid; // L3 replication id for multicast
                                        // packets.

    @padding bit<7> _pad7;

    bit<1> egress_rid_first; // Flag indicating the first replica for
                                        // the given multicast group.

    @padding bit<3> _pad8;

    QueueId_t egress_qid; // Egress (physical) queue id via which
                                        // this packet was served.

    @padding bit<5> _pad9;

    bit<3> egress_cos; // Egress cos (eCoS) value.

    @padding bit<7> _pad10;

    bit<1> deflection_flag; // Flag indicating whether a packet is
                                        // deflected due to deflect_on_drop.

    bit<16> pkt_length; // Packet length, in bytes
}

@__intrinsic_metadata
struct egress_intrinsic_metadata_from_parser_t {
    bit<48> global_tstamp; // Global timestamp (ns) taken upon
                                        // arrival at egress.

    bit<32> global_ver; // Global version number taken upon
                                        // arrival at ingress.

    bit<16> parser_err; // Error flags indicating error(s)
                                        // encountered at ingress parser.
}

@__intrinsic_metadata
struct egress_intrinsic_metadata_for_deparser_t {
    bit<3> drop_ctl; // Disable packet replication:
                                        //    - bit 0 disables unicast,
                                        //      multicast, and resubmit
                                        //    - bit 1 disables copy-to-cpu
                                        //    - bit 2 disables mirroring

    MirrorType_t mirror_type;

    bit<1> coalesce_flush; // Flush the coalesced mirror buffer

    bit<7> coalesce_length; // The number of bytes in the current
                                        // packet to collect in the mirror
                                        // buffer
}

@__intrinsic_metadata
struct egress_intrinsic_metadata_for_output_port_t {
    bit<1> capture_tstamp_on_tx; // Request for packet departure
                                        // timestamping at egress MAC for IEEE
                                        // 1588. consumed by h/w (egress MAC).

    bit<1> update_delay_on_tx; // Request for PTP delay (elapsed time)
                                        // update at egress MAC for IEEE 1588
                                        // Transparent Clock. consumed by h/w
                                        // (egress MAC). when this is enabled,
                                        // the egress pipeline must prepend a
                                        // custom header composed of <ingress
                                        // tstamp (40), byte offset for the
                                        // elapsed time field (8), byte offset
                                        // for UDP checksum (8)> in front of the
                                        // Ethernet header.
    bit<1> force_tx_error; // force a hardware transmission error
}

// -----------------------------------------------------------------------------
// PACKET GENERATION
// -----------------------------------------------------------------------------
// Packet generator supports up to 8 applications and a total of 16KB packet
// payload. Each application is associated with one of the four trigger types:
// - One-time timer
// - Periodic timer
// - Port down
// - Packet recirculation
// For recirculated packets, the event fires when the first 32 bits of the
// recirculated packet matches the application match value and mask.
// A triggered event may generate programmable number of batches with
// programmable number of packets per batch.
header pktgen_timer_header_t {
    @padding bit<3> _pad1;
    bit<2> pipe_id; // Pipe id
    bit<3> app_id; // Application id
    @padding bit<8> _pad2;

    bit<16> batch_id; // Start at 0 and increment to a
                                        // programmed number

    bit<16> packet_id; // Start at 0 and increment to a
                                        // programmed number
}

header pktgen_port_down_header_t {
    @padding bit<3> _pad1;
    bit<2> pipe_id; // Pipe id
    bit<3> app_id; // Application id
    @padding bit<15> _pad2;
    PortId_t port_num; // Port number

    bit<16> packet_id; // Start at 0 and increment to a
                                        // programmed number
}

header pktgen_recirc_header_t {
    @padding bit<3> _pad1;
    bit<2> pipe_id; // Pipe id
    bit<3> app_id; // Application id
    bit<24> key; // Key from the recirculated packet

    bit<16> packet_id; // Start at 0 and increment to a
                                        // programmed number
}

// -----------------------------------------------------------------------------
// TIME SYNCHRONIZATION
// -----------------------------------------------------------------------------

header ptp_metadata_t {
    bit<8> udp_cksum_byte_offset; // Byte offset at which the egress MAC
                                        // needs to update the UDP checksum


    bit<8> cf_byte_offset; // Byte offset at which the egress MAC
                                        // needs to re-insert
                                        // ptp_sync.correction field

    bit<48> updated_cf; // Updated correction field in ptp sync
                                        // message
}

// -----------------------------------------------------------------------------
// CHECKSUM
// -----------------------------------------------------------------------------
// Tofino checksum engine can verify the checksums for header-only checksums
// and calculate the residual (checksum minus the header field
// contribution) for checksums that include the payload.
// Checksum engine only supports 16-bit ones' complement checksums, also known
// as csum16 or internet checksum.

extern Checksum {
    /// Constructor.
    Checksum();

    /// Add data to checksum.
    /// @param data : List of fields to be added to checksum calculation. The
    /// data must be byte aligned.
    void add<T>(in T data);

    /// Subtract data from existing checksum.
    /// @param data : List of fields to be subtracted from the checksum. The
    /// data must be byte aligned.
    void subtract<T>(in T data);

    /// Verify whether the complemented sum is zero, i.e. the checksum is valid.
    /// @return : Boolean flag indicating whether the checksum is valid or not.
    bool verify();

    /// Subtract all header fields after the current state and
    /// return the calculated checksum value.
    /// Marks the end position for residual checksum header.
    /// All header fields extracted after will be automatically subtracted.
    /// @param residual: The calculated checksum value for added fields.
    void subtract_all_and_deposit<T>(out T residual);

    /// Get the calculated checksum value.
    /// @return : The calculated checksum value for added fields.
    bit<16> get();

    /// Calculate the checksum for a  given list of fields.
    /// @param data : List of fields contributing to the checksum value.
    /// @param zeros_as_ones : encode all-zeros value as all-ones.
    bit<16> update<T>(in T data, @optional in bool zeros_as_ones);
}

// ----------------------------------------------------------------------------
// PARSER COUNTER
// ----------------------------------------------------------------------------
// Tofino parser counter can be used to extract header stacks or headers with
// variable length. Tofino has a single 8-bit signed counter that can be
// initialized with an immediate value or a header field.

extern ParserCounter {
    /// Constructor
    ParserCounter();

    /// Load the counter with an immediate value or a header field.
    void set<T>(in T value);

    /// Load the counter with a header field.
    /// @param max : Maximum permitted value for counter (pre rotate/mask/add).
    /// @param rotate : Right rotate (circular) the source field by this number of bits.
    /// @param mask : Mask the rotated source field by 2 ^ (mask + 1) - 1.
    /// @param add : Constant to add to the rotated and masked lookup field.
    void set<T>(in T field,
                in bit<8> max,
                in bit<8> rotate,
                in bit<3> mask,
                in bit<8> add);

    /// @return true if counter value is zero.
    bool is_zero();

    /// @return true if counter value is negative.
    bool is_negative();

    /// Add an immediate value to the parser counter.
    /// @param value : Constant to add to the counter.
    void increment(in bit<8> value);

    /// Subtract an immediate value from the parser counter.
    /// @param value : Constant to subtract from the counter.
    void decrement(in bit<8> value);
}

// ----------------------------------------------------------------------------
// PARSER PRIORITY
// ----------------------------------------------------------------------------
// Tofino ingress parser compare the priority with a configurable!!! threshold
// to determine to whether drop the packet if the input buffer is congested.
// Egress parser does not perform any dropping.

extern ParserPriority {
    /// Constructor
    ParserPriority();

    /// Set a new priority for the packet.
    /// param prio : parser priority for the parsed packet.
    void set(in bit<3> prio);
}

// ----------------------------------------------------------------------------
// HASH ENGINE
// ----------------------------------------------------------------------------
extern CRCPolynomial<T> {
    CRCPolynomial(T coeff, bool reversed, bool msb, bool extended, T init, T xor);
}

extern Hash<W> {
    /// Constructor
    /// @type_param W : width of the calculated hash.
    /// @param algo : The default algorithm used for hash calculation.
    Hash(HashAlgorithm_t algo);

    /// Constructor
    /// @param poly : The default coefficient used for hash algorithm.
    Hash(HashAlgorithm_t algo, CRCPolynomial<_> poly);

    /// Compute the hash for the given data.
    /// @param data : The list of fields contributing to the hash.
    /// @return The hash value.
    W get<D>(in D data);
}

/// Random number generator.
extern Random<W> {
    /// Constructor
    /// @type_param W : width of the calculated hash.
    Random();

    /// Return a random number with uniform distribution.
    /// @return : random number between 0 and 2**W - 1
    W get();
}

// -----------------------------------------------------------------------------
// EXTERN FUNCTIONS
// -----------------------------------------------------------------------------

extern T max<T>(in T t1, in T t2);

extern T min<T>(in T t1, in T t2);

extern void funnel_shift_right<T>(inout T dst, in T src1, in T src2, int shift_amount);

extern void invalidate<T>(in T field);

/// Phase0
extern T port_metadata_unpack<T>(packet_in pkt);

extern bit<32> sizeInBits<H>(in H h);

extern bit<32> sizeInBytes<H>(in H h);

/// Counter
/// Indexed counter with `size’ independent counter values.
extern Counter<W, I> {
    /// Constructor
    /// @type_param W : width of the counter value.
    /// @type_param I : width of the counter index.
    /// @param type : counter type. Packet an byte counters are supported.
    Counter(bit<32> size, CounterType_t type);

    /// Increment the counter value.
    /// @param index : index of the counter to be incremented.
    /// @param adjust_byte_count : optional parameter indicating value to be
    //                             subtracted from counter value.
    void count(in I index, @optional in bit<32> adjust_byte_count);
}

/// DirectCounter
extern DirectCounter<W> {
    DirectCounter(CounterType_t type);
    void count(@optional in bit<32> adjust_byte_count);
}

/// Meter
extern Meter<I> {
    Meter(bit<32> size, MeterType_t type);
    Meter(bit<32> size, MeterType_t type, bit<8> red, bit<8> yellow, bit<8> green);
    bit<8> execute(in I index, in MeterColor_t color, @optional in bit<32> adjust_byte_count);
    bit<8> execute(in I index, @optional in bit<32> adjust_byte_count);
}

/// Direct meter.
extern DirectMeter {
    DirectMeter(MeterType_t type);
    DirectMeter(MeterType_t type, bit<8> red, bit<8> yellow, bit<8> green);
    bit<8> execute(in MeterColor_t color, @optional in bit<32> adjust_byte_count);
    bit<8> execute(@optional in bit<32> adjust_byte_count);
}

/// LPF
extern Lpf<T, I> {
    Lpf(bit<32> size);
    T execute(in T val, in I index);
}

/// Direct LPF
extern DirectLpf<T> {
    DirectLpf();
    T execute(in T val);
}

/// WRED
extern Wred<T, I> {
    Wred(bit<32> size, bit<8> drop_value, bit<8> no_drop_value);
    bit<8> execute(in T val, in I index);
}

/// Direct WRED
extern DirectWred<T> {
    DirectWred(bit<8> drop_value, bit<8> no_drop_value);
    bit<8> execute(in T val);
}

/// Register
extern Register<T, I> {
    /// Instantiate an array of <size> registers. The initial value is
    /// undefined.
    Register(bit<32> size);

    /// Initialize an array of <size> registers and set their value to
    /// initial_value.
    Register(bit<32> size, T initial_value);

    /// Return the value of register at specified index.
    T read(in I index);

    /// Write value to register at specified index.
    void write(in I index, in T value);
}

/// DirectRegister
extern DirectRegister<T> {
    /// Instantiate an array of direct registers. The initial value is
    /// undefined.
    DirectRegister();

    /// Initialize an array of direct registers and set their value to
    /// initial_value.
    DirectRegister(T initial_value);

    /// Return the value of the direct register.
    T read();

    /// Write value to a direct register.
    void write(in T value);
}

extern RegisterParam<T> {
    /// Construct a read-only run-time configurable parameter that can only be
    /// used by RegisterAction.
    /// @param initial_value : initial value of the parameter.
    RegisterParam(T initial_value);

    /// Return the value of the parameter.
    T read();
}

enum MathOp_t {
    MUL, // 2^scale * f(x)         --  false,  0
    SQR, // 2^scale * f(x^2)       --  false,  1
    SQRT, // 2^scale * f(sqrt(x))   --  false, -1
    DIV, // 2^scale * f(1/x)       --  true,   0
    RSQR, // 2^scale * f(1/x^2)     --  true,   1
    RSQRT // 2^scale * f(1/sqrt(x)) --  true,  -1
};

extern MathUnit<T> {
    /// Configure a math unit for use in a register action
    MathUnit(bool invert, int<2> shift, int<6> scale,
             // Note: data tuple contains values in order from 15..0 (reversed)
             tuple< bit<8>, bit<8>, bit<8>, bit<8>,
                    bit<8>, bit<8>, bit<8>, bit<8>,
                    bit<8>, bit<8>, bit<8>, bit<8>,
                    bit<8>, bit<8>, bit<8>, bit<8> > data);
    MathUnit(MathOp_t op, int factor); // configure as factor * op(x)
    MathUnit(MathOp_t op, int A, int B); // configure as (A/B) * op(x)
    T execute(in T x);
};

// This is implemented using an experimental feature in p4c and subject to
// change. See https://github.com/p4lang/p4-spec/issues/561
extern RegisterAction<T, I, U> {
    RegisterAction(Register<T, I> reg);

    U execute(in I index); /* {
        U rv;
        T value = reg.read(index);
        apply(value, rv);
        reg.write(index, value);
        return rv;
    } */
    // Apply the implemented abstract method using an index that increments each
    // time. This method is useful for stateful logging.
    U execute_log();

    // Abstract method that needs to be implemented when RegisterAction is
    // instantiated.
    // @param value : register value.
    // @param rv : return value.
    @synchronous(execute, execute_log)
    abstract void apply(inout T value, @optional out U rv);

    U predicate(@optional in bool cmplo,
                @optional in bool cmphi); /* return the 4-bit predicate value */
}

extern DirectRegisterAction<T, U> {
    DirectRegisterAction(DirectRegister<T> reg);

    U execute(); /* {
        U rv;
        T value = reg.read();
        apply(value, rv);
        reg.write(value);
        return rv;
    } */

    // Abstract method that needs to be implemented when RegisterAction is
    // instantiated.
    // @param value : register value.
    // @param rv : return value.
    @synchronous(execute)
    abstract void apply(inout T value, @optional out U rv);

    U predicate(@optional in bool cmplo,
                @optional in bool cmphi); /* return the 4-bit predicate value */
}

extern ActionProfile {
    /// Construct an action profile of 'size' entries.
    ActionProfile(bit<32> size);
}

extern ActionSelector {
    /// Construct a selection table for a given ActionProfile.
    ActionSelector(ActionProfile action_profile,
                   Hash<_> hash,
                   SelectorMode_t mode,
                   bit<32> max_group_size,
                   bit<32> num_groups);

    /// Stateful action selector.
    ActionSelector(ActionProfile action_profile,
                   Hash<_> hash,
                   SelectorMode_t mode,
                   Register<bit<1>, _> reg,
                   bit<32> max_group_size,
                   bit<32> num_groups);

    /// Construct a selection table for action profile of 'size' entries.
    @deprecated("ActionSelector must be specified with an associated ActionProfile")
    ActionSelector(bit<32> size, Hash<_> hash, SelectorMode_t mode);

    @deprecated("ActionSelector must be specified with an associated ActionProfile")
    ActionSelector(bit<32> size, Hash<_> hash, SelectorMode_t mode, Register<bit<1>, _> reg);
}

extern SelectorAction {
    SelectorAction(ActionSelector sel);
    bit<1> execute(@optional in bit<32> index);
    @synchronous(execute)
    abstract void apply(inout bit<1> value, @optional out bit<1> rv);
}

// Tofino supports mirroring both at the ingress and egress. Ingress deparser
// creates a copy of the original ingress packet and prepends the mirror header.
// Egress deparser first constructs the output packet and then prepends the
// mirror header.
extern Mirror {
    /// Constructor
    @deprecated("Mirror must be specified with the value of the mirror_type instrinsic metadata")
    Mirror();

    /// Constructor
    Mirror(MirrorType_t mirror_type);

    /// Mirror the packet.
    void emit(in MirrorId_t session_id);

    /// Write @hdr into the ingress/egress mirror buffer.
    /// @param hdr : T can be a header type.
    void emit<T>(in MirrorId_t session_id, in T hdr);
}

// Tofino supports packet resubmission at the end of ingress pipeline. When
// a packet is resubmitted, the original packet reference and some limited
// amount of metadata (64 bits) are passed back to the packet’s original
// ingress buffer, where the packet is enqueued again.
extern Resubmit {
    /// Constructor
    @deprecated("Resubmit must be specified with the value of the resubmit_type instrinsic metadata")
    Resubmit();

    /// Constructor
    Resubmit(ResubmitType_t resubmit_type);

    /// Resubmit the packet.
    void emit();

    /// Resubmit the packet and prepend it with @hdr.
    /// @param hdr : T can be a header type.
    void emit<T>(in T hdr);
}

extern Digest<T> {
    /// define a digest stream to the control plane
    @deprecated("Digest must be specified with the value of the digest_type instrinsic metadata")
    Digest();

    /// constructor.
    Digest(DigestType_t digest_type);

    /// Emit data into the stream.  The p4 program can instantiate multiple
    /// Digest instances in the same deparser control block, and call the pack
    /// method once during a single execution of the control block
    void pack(in T data);
}

// Algorithmic TCAM.
// Specify the implementation of a table to be algorithmic TCAM by providing an
// instance of the extern to the 'implementation' attribute of the table.  User
// must also specify one of the table keys with 'atcam_partition_index'
// match_kind.
extern Atcam {
    /// define the parameters for ATCAM table.
    Atcam(@optional bit<32> number_partitions);
}

// Algorithmic LPM.
// Specify the implementation of a table to be algorithmic LPM by providing an
// instance of the extern to the 'implementation' attribute of the table.
extern Alpm {
    /// define the parameters for ALPM table.
    Alpm(@optional bit<32> number_partitions, @optional bit<32> subtrees_per_partition,
         @optional bit<32> atcam_subset_width, @optional bit<32> shift_granularity);
}
# 18 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tofino1arch.p4" 2

// The following declarations provide a template for the programmable blocks in
// Tofino.

parser IngressParserT<H, M>(
    packet_in pkt,
    out H hdr,
    out M ig_md,
    @optional out ingress_intrinsic_metadata_t ig_intr_md,
    @optional out ingress_intrinsic_metadata_for_tm_t ig_intr_md_for_tm,
    @optional out ingress_intrinsic_metadata_from_parser_t ig_intr_md_from_prsr);

parser EgressParserT<H, M>(
    packet_in pkt,
    out H hdr,
    out M eg_md,
    @optional out egress_intrinsic_metadata_t eg_intr_md,
    @optional out egress_intrinsic_metadata_from_parser_t eg_intr_md_from_prsr);

control IngressT<H, M>(
    inout H hdr,
    inout M ig_md,
    @optional in ingress_intrinsic_metadata_t ig_intr_md,
    @optional in ingress_intrinsic_metadata_from_parser_t ig_intr_md_from_prsr,
    @optional inout ingress_intrinsic_metadata_for_deparser_t ig_intr_md_for_dprsr,
    @optional inout ingress_intrinsic_metadata_for_tm_t ig_intr_md_for_tm);

control EgressT<H, M>(
    inout H hdr,
    inout M eg_md,
    @optional in egress_intrinsic_metadata_t eg_intr_md,
    @optional in egress_intrinsic_metadata_from_parser_t eg_intr_md_from_prsr,
    @optional inout egress_intrinsic_metadata_for_deparser_t eg_intr_md_for_dprsr,
    @optional inout egress_intrinsic_metadata_for_output_port_t eg_intr_md_for_oport);

control IngressDeparserT<H, M>(
    packet_out pkt,
    inout H hdr,
    in M metadata,
    @optional in ingress_intrinsic_metadata_for_deparser_t ig_intr_md_for_dprsr,
    @optional in ingress_intrinsic_metadata_t ig_intr_md);

control EgressDeparserT<H, M>(
    packet_out pkt,
    inout H hdr,
    in M metadata,
    @optional in egress_intrinsic_metadata_for_deparser_t eg_intr_md_for_dprsr,
    @optional in egress_intrinsic_metadata_t eg_intr_md,
    @optional in egress_intrinsic_metadata_from_parser_t eg_intr_md_from_prsr);

package Pipeline<IH, IM, EH, EM>(
    IngressParserT<IH, IM> ingress_parser,
    IngressT<IH, IM> ingress,
    IngressDeparserT<IH, IM> ingress_deparser,
    EgressParserT<EH, EM> egress_parser,
    EgressT<EH, EM> egress,
    EgressDeparserT<EH, EM> egress_deparser);

@pkginfo(arch="TNA", version="1.0.2")
package Switch<IH0, IM0, EH0, EM0, IH1, IM1, EH1, EM1,
               IH2, IM2, EH2, EM2, IH3, IM3, EH3, EM3>(
    Pipeline<IH0, IM0, EH0, EM0> pipe0,
    @optional Pipeline<IH1, IM1, EH1, EM1> pipe1,
    @optional Pipeline<IH2, IM2, EH2, EM2> pipe2,
    @optional Pipeline<IH3, IM3, EH3, EM3> pipe3);

package IngressParsers<H, M>(
    IngressParserT<H, M> prsr0,
    @optional IngressParserT<H, M> prsr1,
    @optional IngressParserT<H, M> prsr2,
    @optional IngressParserT<H, M> prsr3,
    @optional IngressParserT<H, M> prsr4,
    @optional IngressParserT<H, M> prsr5,
    @optional IngressParserT<H, M> prsr6,
    @optional IngressParserT<H, M> prsr7,
    @optional IngressParserT<H, M> prsr8,
    @optional IngressParserT<H, M> prsr9,
    @optional IngressParserT<H, M> prsr10,
    @optional IngressParserT<H, M> prsr11,
    @optional IngressParserT<H, M> prsr12,
    @optional IngressParserT<H, M> prsr13,
    @optional IngressParserT<H, M> prsr14,
    @optional IngressParserT<H, M> prsr15,
    @optional IngressParserT<H, M> prsr16,
    @optional IngressParserT<H, M> prsr17);

package EgressParsers<H, M>(
    EgressParserT<H, M> prsr0,
    @optional EgressParserT<H, M> prsr1,
    @optional EgressParserT<H, M> prsr2,
    @optional EgressParserT<H, M> prsr3,
    @optional EgressParserT<H, M> prsr4,
    @optional EgressParserT<H, M> prsr5,
    @optional EgressParserT<H, M> prsr6,
    @optional EgressParserT<H, M> prsr7,
    @optional EgressParserT<H, M> prsr8,
    @optional EgressParserT<H, M> prsr9,
    @optional EgressParserT<H, M> prsr10,
    @optional EgressParserT<H, M> prsr11,
    @optional EgressParserT<H, M> prsr12,
    @optional EgressParserT<H, M> prsr13,
    @optional EgressParserT<H, M> prsr14,
    @optional EgressParserT<H, M> prsr15,
    @optional EgressParserT<H, M> prsr16,
    @optional EgressParserT<H, M> prsr17);

package MultiParserPipeline<IH, IM, EH, EM>(
    IngressParsers<IH, IM> ig_prsr,
    IngressT<IH, IM> ingress,
    IngressDeparserT<IH, IM> ingress_deparser,
    EgressParsers<EH, EM> eg_prsr,
    EgressT<EH, EM> egress,
    EgressDeparserT<EH, EM> egress_deparser);

package MultiParserSwitch<IH0, IM0, EH0, EM0, IH1, IM1, EH1, EM1,
                          IH2, IM2, EH2, EM2, IH3, IM3, EH3, EM3>(
    MultiParserPipeline<IH0, IM0, EH0, EM0> pipe0,
    @optional MultiParserPipeline<IH1, IM1, EH1, EM1> pipe1,
    @optional MultiParserPipeline<IH2, IM2, EH2, EM2> pipe2,
    @optional MultiParserPipeline<IH3, IM3, EH3, EM3> pipe3);
# 15 "/home/yifan/Intel/bf-sde-9.6.0/install/share/p4c/p4include/tna.p4" 2
# 3 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/tna_nbnswitch.p4" 2
# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/const.p4" 1
// Constants to help with static flow entries and troubleshooting
const bit<8> USER = 0;
const bit<8> RSP = 1;
const bit<8> CLOUD = 2;
const bit<8> BGP = 3;
const bit<8> UNKNOWN = 4;

typedef bit<3> mirror_type_t;
typedef bit<8> pkt_type_t;

const mirror_type_t MIRROR_TYPE_I2E = 1;
const mirror_type_t MIRROR_TYPE_E2E = 2;
const pkt_type_t PKT_TYPE_NORMAL = 1;
const pkt_type_t PKT_TYPE_MIRROR = 2;
const pkt_type_t PKT_TYPE_CLOUD_ARP = 3;

const bit<3> NBN_AVC_PCP = 4;
const bit<1> NBN_AVC_DEI = 0;
const bit<12> NBN_AVC_VLAN_ID = 0x8d28;
const bit<3> NBN_CVC_PCP = 4;
const bit<1> NBN_CVC_DEI = 0;
const bit<12> NBN_CVC_VLAN_ID = 0x8066;

//P4_SWITCH_MAC is used for cloud_arp action
// change P4_SWITCH_MAC
// todo change P4_SWITCH_MAC and potentially make it dynamic
const bit<48> P4_SWITCH_MAC = 622693826712;
# 4 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/tna_nbnswitch.p4" 2
# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/parde.p4" 1
# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/headers.p4" 1
//-----------------------------------------------------------------------------
// Protocol Header Definitions
//-----------------------------------------------------------------------------




typedef bit<16> ether_type_t;
typedef bit<48> mac_addr_t;
typedef bit<32> ipv4_addr_t;
typedef bit<128> ipv6_addr_t;
typedef bit<12> vlan_id_t;

header ethernet_h {
    mac_addr_t dst_addr;
    mac_addr_t src_addr;
    ether_type_t ether_type;
}

header vlan_tag_h {
    bit<3> pcp;
    bit<1> dei;
    vlan_id_t vid;
    ether_type_t ether_type;
}

//Double Tag
header vlan_dual_tag_h {
    bit<3> pcp_stag;
    bit<1> cfi_stag;
    vlan_id_t vid_stag;
    bit<16> ether_type_stag;
    bit<3> pcp_ctag;
    bit<1> cfi_ctag;
    vlan_id_t vid_ctag;
    bit<16> ether_type_ctag;
}

header ipv4_h {
    bit<4> version;
    bit<4> ihl;
    bit<8> diffserv;
    bit<16> total_len;
    bit<16> identification;
    bit<3> flags;
    bit<13> frag_offset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdr_checksum;
    ipv4_addr_t src_addr;
    ipv4_addr_t dst_addr;
}

header ipv4_option_h {
    bit<8> type;
    bit<8> length;
    bit<16> value;
}

header ipv6_h {
    bit<4> version;
    bit<8> traffic_class;
    bit<20> flow_label;
    bit<16> payload_len;
    bit<8> next_hdr;
    bit<8> hop_limit;
    ipv6_addr_t src_addr;
    ipv6_addr_t dst_addr;
}

header tcp_h {
    bit<16> src_port;
    bit<16> dst_port;
    bit<32> seq_no;
    bit<32> ack_no;
    bit<4> data_offset;
    bit<4> res;
    bit<8> flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgent_ptr;
}

header udp_h {
    bit<16> src_port;
    bit<16> dst_port;
    bit<16> hdr_length;
    bit<16> checksum;
}

header icmp_h {
    bit<8> type;
    bit<8> code;
    bit<16> checksum;
    // ...
}

// Address Resolution Protocol -- RFC 6747
header arp_h {
    bit<16> hw_type;
    bit<16> proto_type;
    bit<8> hw_addr_len;
    bit<8> proto_addr_len;
    bit<16> opcode;
    bit<48> sha_addr;
    bit<32> spa_addr;
    bit<48> tha_addr;
    bit<32> tpa_addr;
    // ...
}
# 2 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/parde.p4" 2
# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/types.p4" 1



// ----------------------------------------------------------------------------
// Common protocols/types
//-----------------------------------------------------------------------------







/*
header vlan_tag_h {
    bit<3> pcp;
    bit<1> dei;
    vlan_id_t    vid;
    ether_type_t ether_type;
}
*/
# 33 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/types.p4"
// ----------------------------------------------------------------------------
// Common types
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Other Metadata Definitions
//-----------------------------------------------------------------------------

// Ingress metadata
struct ingress_metadata_t {
    bit<1> do_ing_mirroring;
    MirrorId_t ing_mir_ses;
    pkt_type_t pkt_type;
    bit<16> ingress_port;
    bit<8> traffic_type;
}

// Egress metadata
struct egress_metadata_t {
}

header mirror_h {
    pkt_type_t pkt_type;
    bit<16> ingress_port;
    bit<8> traffic_type;
}

@flexible
header mirror_bridged_metadata_h {
    pkt_type_t pkt_type;
    bit<16> ingress_port;
    bit<8> traffic_type;
}

struct header_t {
    ethernet_h ethernet;
    //vlan_tag_h vlan_tag;
    vlan_tag_h[2] vlan_tag;
    ipv4_h ipv4;
    ipv4_option_h ipv4_option;
    ipv6_h ipv6;
    arp_h arp;
    udp_h udp;
    icmp_h icmp;
    tcp_h tcp;
}

struct digest_a_t {
    bit<16> port;
    bit<3> AVC_pcp;
    bit<1> AVC_dei;
    vlan_id_t AVC_vid;
    bit<3> CVC_pcp;
    bit<1> CVC_dei;
    vlan_id_t CVC_vid;
    mac_addr_t dst_mac;
    mac_addr_t src_mac;
    ipv4_addr_t dst_ip;
    ipv4_addr_t src_ip;
}

struct empty_header_t {}

struct empty_metadata_t {}
# 3 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/parde.p4" 2
# 1 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/util.p4" 1
//




parser TofinoIngressParser(
    packet_in pkt,
    out ingress_intrinsic_metadata_t ig_intr_md) {

    state start {
        pkt.extract(ig_intr_md);
        transition select(ig_intr_md.resubmit_flag) {
            1: parse_resubmit;
            0: parse_port_metadata;
        }
    }

    state parse_resubmit {
        // Parse resubmitted packet here
        transition reject;
    }

    state parse_port_metadata {
        pkt.advance(PORT_METADATA_SIZE);
        transition accept;
    }

};

parser TofinoEgressParser(
    packet_in pkt,
    out egress_intrinsic_metadata_t eg_intr_md) {

    state start {
        pkt.extract(eg_intr_md);
        transition accept;
    }

}

// Empty egress control block

control EmptyEgress(
    inout header_t hdr,
    inout egress_metadata_t eg_md,
    in egress_intrinsic_metadata_t eg_intr_md,
    in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
    inout egress_intrinsic_metadata_for_deparser_t eg_dprsr_md,
    inout egress_intrinsic_metadata_for_output_port_t eg_oport_md) {

    apply {}

}
# 4 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/parde.p4" 2


// ---------------------------------------------------------------------------
// Ingress Parser
// ---------------------------------------------------------------------------
parser IngressParser(
    packet_in pkt,
    out header_t hdr,
    out ingress_metadata_t ig_md,
    out ingress_intrinsic_metadata_t ig_intr_md) {

    TofinoIngressParser() tofino_parser;

    state start {
        tofino_parser.apply(pkt, ig_intr_md);
        transition parse_ethernet;
    }

    state parse_ethernet {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.ether_type) {
            0x0800 : parse_ipv4;
            0x86dd : accept;
            0x0806 : parse_arp;
            0x8100: parse_vlan;
            0x88a8 : parse_vlan;
            default : accept;
        }
    }

    state parse_vlan {
        pkt.extract(hdr.vlan_tag.next);
        transition select(hdr.vlan_tag.last.ether_type) {
            0x0800 : parse_ipv4;
            0x86dd : accept;
            0x0806 : parse_arp;
            0x8100 : parse_vlan;
            default : accept;
        }
    }


    state parse_arp {
        pkt.extract(hdr.arp);
        transition accept;
    }

    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
        transition accept;

    }

}

// ---------------------------------------------------------------------------
// Ingress Deparser
// ---------------------------------------------------------------------------
control IngressDeparser(
    packet_out pkt,
    inout header_t hdr,
    in ingress_metadata_t ig_md,
    in ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md) {
    Digest<digest_a_t>() digest_a;
    apply {
        if (ig_dprsr_md.digest_type == 1) {
            digest_a.pack({ig_md.ingress_port,
            hdr.vlan_tag[0].pcp, hdr.vlan_tag[0].dei, hdr.vlan_tag[0].vid,
            hdr.vlan_tag[1].pcp, hdr.vlan_tag[1].dei, hdr.vlan_tag[1].vid,
            hdr.ethernet.dst_addr, hdr.ethernet.src_addr, hdr.ipv4.dst_addr, hdr.ipv4.src_addr});
        }

        pkt.emit(hdr.ethernet);
        pkt.emit(hdr.vlan_tag[0]);
        pkt.emit(hdr.vlan_tag[1]);
        pkt.emit(hdr.ipv4);
        pkt.emit(hdr.ipv4_option);
        pkt.emit(hdr.ipv6);
        pkt.emit(hdr.arp);
        pkt.emit(hdr.udp);
        pkt.emit(hdr.icmp);
        pkt.emit(hdr.tcp);
    }
}

// ---------------------------------------------------------------------------
// Egress parser
// ---------------------------------------------------------------------------
parser EgressParser(
    packet_in pkt,
    out header_t hdr,
    out egress_metadata_t eg_md,
    out egress_intrinsic_metadata_t eg_intr_md) {

    TofinoEgressParser() tofino_parser;

    state start {
        tofino_parser.apply(pkt, eg_intr_md);
        transition accept;
    }

}

// ---------------------------------------------------------------------------
// Egress Deparser
// ---------------------------------------------------------------------------
control EgressDeparser(
    packet_out pkt,
    inout header_t hdr,
    in egress_metadata_t eg_md,
    in egress_intrinsic_metadata_for_deparser_t eg_dprsr_md) {

    apply {
        pkt.emit(hdr);
    }

}
# 5 "/home/yifan/Intel/P4_NECK/tna_nbnswitch/tna_nbnswitch.p4" 2
//const.p4定义: ingress_metadata_t ig_md包含:
// 1. traffic_type(即traffic_t, 0/1/2/3)
// 2. do_ing_mirroring(0/1, 1 means mirrored)
// 3. ing_mir_ses
// 4. pkt_type
// 5. ingress_port

// 其中, pkt_type有3种possible values:
// const pkt_type_t PKT_TYPE_NORMAL = 1;
// const pkt_type_t PKT_TYPE_MIRROR = 2;
// const pkt_type_t PKT_TYPE_CLOUD_ARP = 3;

//另外, do_ing_mirroring


// ---------------------------------------------------------------------------
// Ingress control block
// ---------------------------------------------------------------------------
control Ingress(
    inout header_t hdr,
    inout ingress_metadata_t ig_md,
    in ingress_intrinsic_metadata_t ig_intr_md,
    in ingress_intrinsic_metadata_from_parser_t ig_prsr_md,
    inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md,
    inout ingress_intrinsic_metadata_for_tm_t ig_tm_md) {


    bit<32> temp_ip;
    bool dst_cloud=true;
    bool cloud_enabled=true;

    // 定义direct counters
    @name(".counter_ing")
    DirectCounter<bit<32>>(CounterType_t.PACKETS_AND_BYTES) counter_ing;

    @name(".counter_egr")
    DirectCounter<bit<32>>(CounterType_t.PACKETS_AND_BYTES) counter_egr;

    @name(".counter_cloud_ing")
    DirectCounter<bit<32>>(CounterType_t.PACKETS_AND_BYTES) counter_cloud_ing;

    @name(".counter_cloud_egr")
    DirectCounter<bit<32>>(CounterType_t.PACKETS_AND_BYTES) counter_cloud_egr;

    @name(".drop")
    action drop() {
        ig_dprsr_md.drop_ctl = 0x1;
        exit;
    }

    @name(".nop")
    action nop(){}


    @name(".unk_source")
    action unk_source(){
        ig_md.traffic_type = UNKNOWN;
    }

    //在action中counter.count()
    @name(".hit_counting_table_ing")
    action hit_counting_table_ing(){
        counter_ing.count();
    }

    @name(".hit_counting_table_egr")
    action hit_counting_table_egr(){
        counter_egr.count();
    }

    @name(".hit_counting_table_cloud_ing")
    action hit_counting_table_cloud_ing(){
        counter_cloud_ing.count();
    }

    @name(".hit_counting_table_cloud_egr")
    action hit_counting_table_cloud_egr(){
        counter_cloud_egr.count();
    }

    // 看traffic是来自USER还是RSP还是CLOUD
    // traffic type有4种:
    // const bit<2> USER = 0;
    // const bit<2> RSP = 1;
    // const bit<2> CLOUD = 2;
    // UNKNOWN = 3
    @name(".detect_source")
    action detect_source(bit<2> traffic){
        ig_md.traffic_type = (bit<8>)traffic;
    }

    @name(".set_egr_port")
    action set_egr_port(PortId_t dst_port) {
        ig_tm_md.ucast_egress_port = dst_port;
    }


    // when access to cloud, need to strip vlan tag
    // when cloud to access, need to add vlan tag


    @name(".set_src_mac")
    action set_src_mac(mac_addr_t src_mac) {
        hdr.ethernet.src_addr = src_mac;
    }

    @name(".set_dst_mac")
    action set_dst_mac(mac_addr_t dst_mac) {
        hdr.ethernet.dst_addr = dst_mac;
    }

    // cloud_enabled是个global variable. bool cloud_enabled;
    @name(".set_cloud_access")
    action set_cloud_access() {
        cloud_enabled = true;
    }

    @name(".no_access")
    action no_access() {
        cloud_enabled = false;
    }

    // dst_cloud是个global variable. bool dst_cloud;
    @name(".invalid_cloud_dst")
    action invalid_cloud_dst() {
        dst_cloud = false;
    }

    @name(".valid_cloud_dst")
    action valid_cloud_dst() {
        dst_cloud = true;
    }


    //当subscriber src MAC, src IP, ingress port有一项unknown的时候,
    //需要mirror packet然后send back to control plane for MAC learning
    // const mirror_type_t MIRROR_TYPE_I2E = 1;
    // const mirror_type_t MIRROR_TYPE_E2E = 2;
    // MIRROR_TYPE_E2E = 2的packet在deparser会被mirror
    action unknown_source () {
        ig_md.do_ing_mirroring = 1;
        ig_md.ing_mir_ses = (bit<10>)ig_intr_md.ingress_port;
        ig_dprsr_md.mirror_type = MIRROR_TYPE_I2E;
        ig_md.pkt_type = PKT_TYPE_MIRROR;
        ig_md.ingress_port = (bit<16>)ig_intr_md.ingress_port;
    }

    // provide switch MAC to clouds
    action cloud_arp () {
        ig_tm_md.ucast_egress_port = ig_intr_md.ingress_port;
        hdr.arp.spa_addr = hdr.arp.tpa_addr;
        // tpa: target protocol address, 即之前存的temp_ip(sender protocol address)
        hdr.arp.tpa_addr = temp_ip;
        hdr.arp.tha_addr = hdr.arp.sha_addr;
        hdr.arp.sha_addr = P4_SWITCH_MAC;
        hdr.arp.opcode = (bit<16>)2;
        hdr.ethernet.dst_addr = hdr.ethernet.src_addr;
        hdr.ethernet.src_addr = P4_SWITCH_MAC;
    }


    // rsp port routing table
    // e.g. packets arriving at the RSP port(simple downstream).
    @name(".port_forward")
    table port_forward {
        key = {
            // custom_ig_md.l4_dst_port是ip header中的dst port, 而ig_intr_md.ingress_port是switch的internal port
            ig_intr_md.ingress_port : exact @name("ingress_port");
        }
        actions = {
            set_egr_port;
            @defaultonly nop;
        }
        const default_action = nop;
    }


    @name(".counting_table_ing")
    table counting_table_ing {
         key = {
            ig_intr_md.ingress_port : exact @name("ingress_port_count");
        }
        actions = {
            hit_counting_table_ing;
            @defaultonly nop;
        }
        const default_action = nop;
        // associate direct counter with this table
        counters = counter_ing;
     }

    @name(".counting_table_egr")
    table counting_table_egr {
         key = {
            ig_tm_md.ucast_egress_port : exact @name("egress_port_count");
        }
        actions = {
            hit_counting_table_egr;
            @defaultonly nop;
        }
        const default_action = nop;
        counters = counter_egr;
     }

    @name(".counting_table_cloud_ing")
    table counting_table_cloud_ing {
         key = {
            ig_intr_md.ingress_port : exact @name("ingress_port_count");
        }
        actions = {
            hit_counting_table_cloud_ing;
            @defaultonly nop;
        }
        const default_action = nop;
        counters = counter_cloud_ing;
     }

    @name(".counting_table_cloud_egr")
    table counting_table_cloud_egr {
         key = {
            ig_tm_md.ucast_egress_port : exact @name("egress_port_count");
        }
        actions = {
            hit_counting_table_cloud_egr;
            @defaultonly nop;
        }
        const default_action = nop;
        counters = counter_cloud_egr;
     }

    // port_type table用于set traffic_t metadata based on ingress port. 但是什么port有什么traffic_t是control plane的logic.
    // traffic_t 有3种:
    // const bit<2> USER = 0;
    // const bit<2> RSP = 1;
    // const bit<2> CLOUD = 2;
    @name(".port_type")
    table port_type {
        key = {
            ig_intr_md.ingress_port : exact @name("ingress_port_type");
        }
        actions = {
            detect_source;
            unk_source;
        }
        const default_action = unk_source;
    }

    //AVC CVC tag in front end, but we use ip prefix to see if subscriber has cloud access
    @name(".cloud_access")
    table cloud_access {
        key = {
            hdr.ipv4.src_addr : lpm @name("src_ip");
        }
        actions = {
            set_cloud_access;
            no_access;
        }
        //设置default action使得所有没有match的packet都default进行no_access action
        const default_action = no_access;
    }


    // When cloud sends packets to user, check if source IP is a valid cloud,
    // if not, drop packet.
    @name(".cloud_validity")
    table cloud_validity {
        key = {
            hdr.ipv4.src_addr : lpm @name("src_ip");
        }
        actions = {
            nop;
            drop;
        }
        const default_action = drop;
    }


    // Don't want cloud response to go to unauthorised subscribers
    @name(".reverse_cloud_access")
    table reverse_cloud_access {
        key = {
            hdr.ipv4.dst_addr : lpm @name("dst_ip_access");
        }
        actions = {
            // set and reset variable + if(cloud_enabled)或drop/nop哪个更好?
            set_cloud_access;
            no_access;
        }
        const default_action = no_access;
    }

    // cloud port and access port routing table,
    // 当packet来自access时, set egress port to be appropriate cloud port based on dest cloud IP.
    // 若dst cloud IP不是valid cloud address的话, set egress port as RSP port. 但这个逻辑在control plane处理
    // 当packet来自cloud时, set egress port to be appropriate access port based on dest access IP.
    @name(".ipv4_forward")
    table ipv4_forward {
        key = {
            hdr.ipv4.dst_addr: lpm @name("dst_ip");
        }
        actions = {
            set_egr_port;
            nop;
        }
        const default_action = nop;
    }

    // This table is used to check if user is sending to a cloud, if not, then it sends to RSP BNG
    // Also used for counting # of cloud packets, if valid_cloud_dst, invoke counting_table_cloud_egr table
    @name(".check_dst_cloud")
    table check_dst_cloud {
        key = {
            hdr.ipv4.dst_addr: lpm @name("cloud_dst_ip");
        }
        actions = {
            valid_cloud_dst;
            invalid_cloud_dst;
        }
        const default_action = invalid_cloud_dst;
    }

    @name(".update_src_mac")
    table update_src_mac {
        key = {
            hdr.ipv4.dst_addr: lpm @name("src_ip_mac");
        }
        actions = {
            set_src_mac;
            nop;
        }
        const default_action = nop;
    }

    @name(".update_dst_mac")
    table update_dst_mac {
        key = {
            hdr.ipv4.dst_addr: lpm @name("dst_ip_mac");
        }
        actions = {
            set_dst_mac;
            nop;
        }
        const default_action = nop;
    }

    // learn_mac learn的是both subscriber和RSP的MAC
    @name(".learned_sources_user")
    table learned_sources_user {
        key = {
            hdr.ipv4.src_addr: exact @name("known_ipv4");
            hdr.ethernet.src_addr : exact @name("known_mac");
            ig_intr_md.ingress_port : exact @name("known_ingress_port");

        }
        actions = {
            // do nothing if user is known
            nop;
            // mirror and do MAC learn if user is unknown
            unknown_source;
        }
        const default_action = unknown_source;
    }

    // 收到response from RSP to subscribers的时候, 也要learn RSP的MAC
    @name(".learned_sources_rsp")
    table learned_sources_rsp {
        key = {
            hdr.ipv4.dst_addr: exact @name("known_ipv4_rsp");
            hdr.ethernet.src_addr : exact @name("known_mac_rsp");
            ig_intr_md.ingress_port : exact @name("known_ingress_port_rsp");

        }
        actions = {
            nop;
            unknown_source;
        }
        const default_action = unknown_source;
    }

    // cloud询问switch的MAC address
    // arp_ip就是swicth的IP address, needs to be provided by control plane
    // packet will egress on the same port that it was ingressed
    @name(".arp_response")
    table arp_response {
        key = {
            // tpa: target protocol address, 即arp索求MAC address的ip address
            hdr.arp.tpa_addr: exact @name("arp_ip");
        }
        actions = {
            nop;
            cloud_arp;
        }
        const default_action = nop;
    }


    //swicth需要forward host ARP request and RSP BNG ARP response
    @name(".arp_forward")
    table arp_forward {
        key = {
            // tpa: target protocol address, 即arp索求MAC address的ip address
            hdr.arp.spa_addr: exact @name("arp_spa_ip");
            hdr.arp.tpa_addr: exact @name("arp_tpa_ip");
        }
        actions = {
            set_egr_port;
            nop;
        }
        const default_action = nop;
    }


    //packet通过这样的方式来pipeline通过多个match action tables.
    apply {
        ig_dprsr_md.digest_type = 1;
        ig_md.ingress_port = (bit<16>) ig_intr_md.ingress_port;

        counting_table_ing.apply();
        counting_table_cloud_ing.apply();
        port_type.apply();

        if (ig_md.traffic_type == USER) {
            // Handles ARP requests from user to RSP
            // either dst cloud or dst RSP, ARP all go to RSP
            if ((hdr.ethernet.ether_type == 0x0806 || hdr.vlan_tag[1].ether_type == 0x0806)) {
                port_forward.apply();
            }
            // Handles direct cloud connectivity
            else{
                // if going to the cloud(previous ipv4_forward no match), check user's cloud access
                cloud_access.apply();
                // check if the destination is a cloud IP address
                check_dst_cloud.apply();
                // route to the cloud
                if (dst_cloud){
                    //strip VLAN tag for eligible direct cloud traffic
                    hdr.vlan_tag[0].setInvalid();
                    hdr.vlan_tag[1].setInvalid();
                    hdr.ethernet.ether_type = 0x0800;

                    update_src_mac.apply();
                    update_dst_mac.apply();
                    ipv4_forward.apply();
                }
                // default forward to RSP BNG
                else {
                    port_forward.apply();
                }
            }
        }

        else if (ig_md.traffic_type == RSP){
            // Handles ARP responses from RSP to user and normal downstream traffic from RSP(same subnet so MAC change not applicable)
            port_forward.apply();
        }

        else if (ig_md.traffic_type == CLOUD){
            // Handles ARP requests from Cloud to switch
            if ((hdr.ethernet.ether_type == 0x0806 || hdr.vlan_tag[1].ether_type == 0x0806)) {
                arp_response.apply();
                // sets egress port to the same as the ingress port
                port_forward.apply();
            }
            // Handles normal downstream traffic from Cloud, off net so MAC change needed
            else{
                // populate vlan c-tag
                hdr.vlan_tag[0].pcp = NBN_AVC_PCP;
                hdr.vlan_tag[0].dei = NBN_AVC_DEI;
                hdr.vlan_tag[0].vid = NBN_AVC_VLAN_ID;
                hdr.vlan_tag[0].ether_type = 0x8100;

                // populate vlan s-tag
                hdr.vlan_tag[1].pcp = NBN_CVC_PCP;
                hdr.vlan_tag[1].dei = NBN_CVC_DEI;
                hdr.vlan_tag[1].vid = NBN_CVC_VLAN_ID;
                hdr.vlan_tag[1].ether_type = 0x0800;

                // Mark ethertype as vlan
                hdr.ethernet.ether_type = 0x8100;

                // insert vlan tags
                hdr.vlan_tag[0].setValid();
                hdr.vlan_tag[1].setValid();

                // Drop packets to users that don't have direct cloud connectivity
                reverse_cloud_access.apply();
                //if (cloud_enabled == true) {
                    update_src_mac.apply();
                    update_dst_mac.apply();
                    ipv4_forward.apply();
                //}
            }
        }

        counting_table_egr.apply();
        counting_table_cloud_egr.apply();
    }
}




// ---------------------------------------------------------------------------
// Egress control block
// ---------------------------------------------------------------------------
control Egress(
    inout header_t hdr,
    inout egress_metadata_t eg_md,
    in egress_intrinsic_metadata_t eg_intr_md,
    in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
    inout egress_intrinsic_metadata_for_deparser_t eg_dprsr_md,
    inout egress_intrinsic_metadata_for_output_port_t eg_oport_md) {

    apply {}

}


// ---------------------------------------------------------------------------------------
// main package block
// note that the Pipeline must be named "pipe" for the P4Runtime shell scripts to work
// ---------------------------------------------------------------------------------------

Pipeline(
    IngressParser(),
    Ingress(),
    IngressDeparser(),
    EgressParser(),
    Egress(),
    EgressDeparser()
) pipe;

// instantiate the package Switch with a single pipeline
Switch(pipe) main;
